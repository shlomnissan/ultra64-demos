/*
 * Do not edit this file.  It was automatically generated
 * by "rgb2c" from the file "mymip0.rgb".
 *
/*
 *   Size: 8 x 8
 *   Number of channels: 3
 *   Number of bits per texel: 16 (G_IM_SIZ_16b)
 *   Format of texel: G_IM_FMT_RGBA
 *
 * Example usage:
 *
 *   gsSPTexture (128, 128, (levels-1), G_TX_RENDERTILE, 1),
 *   gsDPPipeSync (),
 *   gsDPSetCombineMode (G_CC_MODULATERGBA, G_CC_MODULATERGBA),
 *   gsDPSetTexturePersp (G_TP_PERSP),
 *   gsDPSetTextureDetail (G_TD_CLAMP),
 *   gsDPSetTextureLOD (G_TL_TILE),
 *   gsDPSetTextureLUT (G_TT_NONE),
 *   gsDPSetTextureFilter (G_TF_BILERP),
 *   gsDPSetTextureConvert(G_TC_FILT),
 *   gsDPLoadTextureBlock (RGBA16mymipHMM_lvl1, G_IM_FMT_RGBA, G_IM_SIZ_16b, 8, 8, 0
 *     G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR,
 *     G_TX_NOMASK, G_TX_NOMASK, G_TX_NOLOD, G_TX_NOLOD),
 */

#if 0	/* Image preview */
	+--------+
	|++o+~~oo|
	|+o+,~,+o|
	|+++,,.~o|
	|oo+~,,+o|
	|*%*~+,~+|
	|*%*~,~,,|
	|oo+~,,,,|
	|+++o+,,+|
	+--------+
#endif

/*
 *   Size: 4 x 4
 *   Number of channels: 3
 *   Number of bits per texel: 16 (G_IM_SIZ_16b)
 *   Format of texel: G_IM_FMT_RGBA
 *
 * Example usage:
 *
 *   gsSPTexture (128, 128, (levels-1), G_TX_RENDERTILE, 1),
 *   gsDPPipeSync (),
 *   gsDPSetCombineMode (G_CC_MODULATERGBA, G_CC_MODULATERGBA),
 *   gsDPSetTexturePersp (G_TP_PERSP),
 *   gsDPSetTextureDetail (G_TD_CLAMP),
 *   gsDPSetTextureLOD (G_TL_TILE),
 *   gsDPSetTextureLUT (G_TT_NONE),
 *   gsDPSetTextureFilter (G_TF_BILERP),
 *   gsDPSetTextureConvert(G_TC_FILT),
 *   gsDPLoadTextureBlock (RGBA16mymipHMM_lvl2, G_IM_FMT_RGBA, G_IM_SIZ_16b, 4, 4, 0
 *     G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR,
 *     G_TX_NOMASK, G_TX_NOMASK, G_TX_NOLOD, G_TX_NOLOD),
 */

#if 0	/* Image preview */
	+----+
	|~%~%|
	|%~*~|
	|~*~%|
	|%~%~|
	+----+
#endif

/*
 *   Size: 2 x 2
 *   Number of channels: 3
 *   Number of bits per texel: 16 (G_IM_SIZ_16b)
 *   Format of texel: G_IM_FMT_RGBA
 *
 * Example usage:
 *
 *   gsSPTexture (128, 128, (levels-1), G_TX_RENDERTILE, 1),
 *   gsDPPipeSync (),
 *   gsDPSetCombineMode (G_CC_MODULATERGBA, G_CC_MODULATERGBA),
 *   gsDPSetTexturePersp (G_TP_PERSP),
 *   gsDPSetTextureDetail (G_TD_CLAMP),
 *   gsDPSetTextureLOD (G_TL_TILE),
 *   gsDPSetTextureLUT (G_TT_NONE),
 *   gsDPSetTextureFilter (G_TF_BILERP),
 *   gsDPSetTextureConvert(G_TC_FILT),
 *   gsDPLoadTextureBlock (RGBA16mymipHMM_lvl3, G_IM_FMT_RGBA, G_IM_SIZ_16b, 2, 2, 0
 *     G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR,
 *     G_TX_NOMASK, G_TX_NOMASK, G_TX_NOLOD, G_TX_NOLOD),
 */

#if 0	/* Image preview */
	+--+
	|~~|
	|~~|
	+--+
#endif

/*
 *   Size: 1 x 1
 *   Number of channels: 3
 *   Number of bits per texel: 16 (G_IM_SIZ_16b)
 *   Format of texel: G_IM_FMT_RGBA
 *
 * Example usage:
 *
 *   gsSPTexture (128, 128, (levels-1), G_TX_RENDERTILE, 1),
 *   gsDPPipeSync (),
 *   gsDPSetCombineMode (G_CC_MODULATERGBA, G_CC_MODULATERGBA),
 *   gsDPSetTexturePersp (G_TP_PERSP),
 *   gsDPSetTextureDetail (G_TD_CLAMP),
 *   gsDPSetTextureLOD (G_TL_TILE),
 *   gsDPSetTextureLUT (G_TT_NONE),
 *   gsDPSetTextureFilter (G_TF_BILERP),
 *   gsDPSetTextureConvert(G_TC_FILT),
 *   gsDPLoadTextureBlock (RGBA16mymipHMM_lvl4, G_IM_FMT_RGBA, G_IM_SIZ_16b, 1, 1, 0
 *     G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR,
 *     G_TX_NOMASK, G_TX_NOMASK, G_TX_NOLOD, G_TX_NOLOD),
 */

#if 0	/* Image preview */
	+-+
	|+|
	+-+
#endif

/*
 *   Size: 16 x 16
 *   Number of channels: 3
 *   Number of bits per texel: 16 (G_IM_SIZ_16b)
 *   Format of texel: G_IM_FMT_RGBA
 *
 * Example usage:
 *
 *   gsSPTexture (128, 128, (levels-1), G_TX_RENDERTILE, 1),
 *   gsDPPipeSync (),
 *   gsDPSetCombineMode (G_CC_MODULATERGBA, G_CC_MODULATERGBA),
 *   gsDPSetTexturePersp (G_TP_PERSP),
 *   gsDPSetTextureDetail (G_TD_CLAMP),
 *   gsDPSetTextureLOD (G_TL_TILE),
 *   gsDPSetTextureLUT (G_TT_NONE),
 *   gsDPSetTextureFilter (G_TF_BILERP),
 *   gsDPSetTextureConvert(G_TC_FILT),
 *   gsDPLoadTextureBlock (RGBA16mymipHMM, G_IM_FMT_RGBA, G_IM_SIZ_16b, 16, 16, 0
 *     G_TX_WRAP | G_TX_NOMIRROR, G_TX_WRAP | G_TX_NOMIRROR,
 *     G_TX_NOMASK, G_TX_NOMASK, G_TX_NOLOD, G_TX_NOLOD),
 */

#if 0	/* Image preview */
	+----------------+
	|.+....+..+....+.|
	|..+..+....+..+..|
	|...++......++...|
	|....+.......+...|
	|..+..+....+..+..|
	|.+...,~~,+....+.|
	|+....~,+~,.....+|
	|+....~..+~......|
	|.+...~+.,~....+.|
	|..+..~,.,~+..+..|
	|...++~,.,~.++...|
	|....+,~~~...+...|
	|..+..+....+..+..|
	|.+....+..+....+.|
	|+......++......+|
	|+.......+.......|
	+----------------+
#endif

static Gfx RGBA16mymipHMM_dummy_aligner2[] = { gsSPEndDisplayList() };

unsigned short RGBA16mymipHMM_buf[] = {
	0x003f, 0x53ff, 0x0001, 0x0001, 	0x0001, 0x0001, 0x53ff, 0x0021, 
	0x003f, 0x53ff, 0x0001, 0x0001, 	0x0001, 0x0001, 0x53ff, 0x003f, 
	0x53ff, 0x0001, 0x0021, 0x003f, 	0x003f, 0x0021, 0x0001, 0x53ff, 
	0x53ff, 0x0001, 0x0021, 0x003f, 	0x003f, 0x0021, 0x0001, 0x53ff, 
	0x0001, 0x0021, 0x003f, 0x53ff, 	0x53ff, 0x003f, 0x0021, 0x0001, 
	0x0001, 0x0021, 0x003f, 0x53ff, 	0x53ff, 0x003f, 0x0021, 0x0001, 
	0x0021, 0x003f, 0x0001, 0x0001, 	0x0001, 0x0001, 0x53ff, 0x0021, 
	0x0021, 0x003f, 0x0001, 0x0001, 	0x0001, 0x0001, 0x53ff, 0x0021, 
	0x0001, 0x0001, 0x53ff, 0x0021, 	0x003f, 0x53ff, 0x0001, 0x0001, 
	0x0001, 0x0001, 0x53ff, 0x0021, 	0x003f, 0x53ff, 0x0001, 0x0001, 
	0x003f, 0x0021, 0x0001, 0x53ff, 	0xe889, 0xf801, 0x0021, 0x4031, 
	0x003f, 0x0021, 0xd001, 0x7b35, 	0x53ff, 0x0001, 0x0021, 0x003f, 
	0x53ff, 0x003f, 0x0021, 0x0001, 	0x0001, 0xf003, 0xb015, 0x7af1, 
	0xf089, 0xa815, 0x0021, 0x0001, 	0x0001, 0x0021, 0x003f, 0x53ff, 
	0x0001, 0x0001, 0x53ff, 0x0021, 	0x4019, 0x003f, 0x3001, 0xf801, 
	0x0001, 0x0001, 0xa9e1, 0xf801, 	0x0021, 0x003f, 0x0001, 0x0001, 
	0x003f, 0x53ff, 0x0001, 0x0001, 	0x4001, 0xf801, 0x82f1, 0x0021, 
	0x8021, 0xf801, 0x0001, 0x0001, 	0x0001, 0x0001, 0x53ff, 0x0021, 
	0x53ff, 0x0001, 0x0021, 0x003f, 	0x4031, 0x0021, 0x4001, 0xf801, 
	0x5bff, 0x0001, 0x8011, 0xf801, 	0x003f, 0x0021, 0x0001, 0x53ff, 
	0x0001, 0x0021, 0x003f, 0x53ff, 	0x53ff, 0xf801, 0x900f, 0x0001, 
	0xc001, 0xd007, 0x003f, 0x53ff, 	0x53ff, 0x003f, 0x0021, 0x0001, 
	0x0021, 0x003f, 0x0001, 0x0001, 	0xf801, 0xf801, 0x53ff, 0x7013, 
	0x0021, 0x003f, 0xf801, 0x5001, 	0x0001, 0x0001, 0x53ff, 0x0021, 
	0x0001, 0x0001, 0x53ff, 0x0021, 	0x003f, 0x53ff, 0x2001, 0x4001, 
	0x1001, 0x0001, 0x53ff, 0x0021, 	0x003f, 0x53ff, 0x0001, 0x0001, 
	0x003f, 0x0021, 0x0001, 0x53ff, 	0x53ff, 0x0001, 0x0021, 0x003f, 
	0x003f, 0x0021, 0x0001, 0x53ff, 	0x53ff, 0x0001, 0x0021, 0x003f, 
	0x53ff, 0x003f, 0x0021, 0x0001, 	0x0001, 0x0021, 0x003f, 0x53ff, 
	0x53ff, 0x003f, 0x0021, 0x0001, 	0x0001, 0x0021, 0x003f, 0x53ff, 
	0x0001, 0x0001, 0x53ff, 0x0021, 	0x0021, 0x003f, 0x0001, 0x0001, 
	0x0001, 0x0001, 0x53ff, 0x0021, 	0x0021, 0x003f, 0x0001, 0x0001, 
	0x8421, 0x8421, 0x8421, 0x635f, 	0x2a5b, 0x531b, 0x8421, 0x8421, 
	0x739f, 0x1a9f, 0x8421, 0x8421, 	0x635b, 0x8c23, 0x0aeb, 0x0995, 
	0x8421, 0x83e3, 0x6b9f, 0x19db, 	0x125f, 0x0111, 0x62d9, 0x8463, 
	0x8453, 0x134d, 0x8421, 0xa4d3, 	0x8421, 0x8421, 0x034b, 0x11cb, 
	0xb591, 0xffc1, 0xce41, 0x0ccd, 	0x04cd, 0x3207, 0x818f, 0x83df, 
	0xce01, 0x1b45, 0xbd89, 0xffc3, 	0xa805, 0x698f, 0x2249, 0xc0c9, 
	0x841b, 0x9c85, 0x7345, 0x5315, 	0x710d, 0xb845, 0x9005, 0x598d, 
	0x739f, 0x8c63, 0x8423, 0x7bdf, 	0x618f, 0x73df, 0x7b9d, 0x694d, 
	0x4211, 0xce73, 0x5295, 0xd6b5, 	0xc631, 0x4a53, 0xce73, 0x5ad7, 
	0x5295, 0xbdef, 0x5ad7, 0xce73, 	0xce73, 0x4211, 0xdef7, 0x4a53, 
	0x89cf, 0x818d, 0x0000, 0x0000, 	0x0000, 0x0000, 0x818d, 0x818d, 
	0xf83f, 0x0000, 0x0000, 0x0000, };

Gfx RGBA16mymipHMM_dl[] = {
	gsDPSetTextureImage( 0, 2, 1, RGBA16mymipHMM_buf),
	gsDPSetTile( 0, 2, 0, 0, G_TX_LOADTILE, 0, 0, 0, 0, 0, 0, 0),
	gsDPLoadBlock( G_TX_LOADTILE, 0, 0, 348, 0),
	gsDPSetTile(0, 2, 4, 0, 0, 0, 0, 4, 0, 0, 4, 0),
	gsDPSetTileSize( 0,  2, 2, 15 << G_TEXTURE_IMAGE_FRAC, 15 << G_TEXTURE_IMAGE_FRAC),
	gsDPSetTile(0, 2, 2, 64, 1, 0, 0, 3, 1, 0, 3, 1),
	gsDPSetTileSize( 1,  2, 2, 7 << G_TEXTURE_IMAGE_FRAC, 7 << G_TEXTURE_IMAGE_FRAC),
	gsDPSetTile(0, 2, 1, 80, 2, 0, 0, 2, 2, 0, 2, 2),
	gsDPSetTileSize( 2,  2, 2, 3 << G_TEXTURE_IMAGE_FRAC, 3 << G_TEXTURE_IMAGE_FRAC),
	gsDPSetTile(0, 2, 1, 84, 3, 0, 0, 1, 3, 0, 1, 3),
	gsDPSetTileSize( 3,  2, 2, 1 << G_TEXTURE_IMAGE_FRAC, 1 << G_TEXTURE_IMAGE_FRAC),
	gsDPSetTile(0, 2, 1, 86, 4, 0, 0, 0, 4, 0, 0, 4),
	gsDPSetTileSize( 4,  2, 2, 0 << G_TEXTURE_IMAGE_FRAC, 0 << G_TEXTURE_IMAGE_FRAC),
	gsSPEndDisplayList(),
	gsSPEndDisplayList(),
	gsSPEndDisplayList(),
};
